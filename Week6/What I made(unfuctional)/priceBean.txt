/**
 * Copyright (c) 2014 Oracle and/or its affiliates. All rights reserved.
 *
 * You may not modify, use, reproduce, or distribute this software except in
 * compliance with  the terms of the License at:
 * https://github.com/javaee/tutorial-examples/LICENSE.txt
 */
package javaeetutorial.web.dukeetf;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.ejb.Timeout;
import javax.ejb.TimerConfig;
import javax.ejb.TimerService;
import java.util.ArrayList;
import java.util.List;
//
import java.util.Scanner;

/* Updates price and volume information every second */
@Startup
@Singleton
public class PriceVolumeBean {
    /* Use the container's timer service */
    @Resource TimerService tservice;
 //   private Random random;
    private DukeETFServlet servlet;
    private  int track = 1;
    private final   List<String> lineList= new ArrayList<>();
    
    private boolean loaded = false;
    private static final Logger logger = Logger.getLogger("PriceVolumeBean");
    

    
    @PostConstruct
    public void init() {
        /* Intialize the EJB and create a timer */
        logger.log(Level.INFO, "Initializing EJB.");
    //    random = new Random();
        servlet = null;
        tservice.createIntervalTimer(1000, 1000, new TimerConfig());
        //loading in the list
        if(loaded == false){
            readToList("C:\\Users\\Travis\\Desktop\\Rproject4input.txt");
            loaded = true; 
            
     
            } 
    }
    
    public void registerServlet(DukeETFServlet servlet) {
        /* Associate a servlet to send updates to */
        this.servlet = servlet;
        
      
    }
    
    @Timeout
    public void timeout() {
        /* Adjust price and volume and send updates */
      //  price += 1.0*(random.nextInt(100)-50)/100.0;
      //   volume += random.nextInt(5000) - 2500;
      //local vars
      //  int volume = 100;
        double tvolume;
        double price;
    
        String temp = lineList.get(100);

       String substring[] = temp.split(",");
        
      
       price = Double.parseDouble(substring[5]);
        
  
       
       tvolume = Double.parseDouble(substring[4]);
       
       int volume = (int)tvolume;
       
        if (servlet != null)
            servlet.send(price,volume);
        
               
    }
    
     //method to read to a specific array from a file
    public  void readToList(String pathName){
       
        String myline =null;
        
        try{
            BufferedReader reader = new BufferedReader(new FileReader(pathName));
            while((myline = reader.readLine())!= null){
                lineList.add(myline);
            }
        }
        
        catch(Exception e){
            e.printStackTrace();
        }
        /*
        try{
            BufferedReader reader = new BufferedReader(new FileReader(pathName));
           String temp = reader.readLine();
            
            while((myline = reader.readLine()) != null){
              // lineList.add(myline);
              lineList.add(temp);
            }*/
        /*
        try{
            Scanner scanner = new Scanner(new FileReader(pathName));
          
                while (scanner.hasNext()){
                    
                    myline = scanner.nextLine();
                    lineList.add(loc, myline);
                    loc++;
                    scanner.nextLine();
                }
           
        }
        catch (Exception e){
            e.printStackTrace();
         }
     }*/

    }
}

